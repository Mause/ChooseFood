# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    uses: Mause/ChooseFood/.github/workflows/reuse.yaml@main

  build_releases:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        target: [appbundle, web]

    steps:
      - uses: actions/checkout@v2

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}-${{ hashFiles('pubspec.lock') }}

      - uses: subosito/flutter-action@v1
        with:
          channel: beta
      - name: Install dependencies
        run: flutter pub get
      - name: Prebuild
        run: flutter pub run build_runner build
      - if: ${{ matrix.target == 'appbundle' }}
        run: echo "$SIGNING_KEY" | openssl base64 -d > android/app/key.store
        shell: bash
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      - if: ${{ matrix.target == 'appbundle' }}
        run: |
          flutter build appbundle \
            --build-number ${{ github.run_number }} \
            --dart-define=SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
            --dart-define=GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
            --no-shrink
        env:
          SIGNING_KEY: key.store
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      - if: ${{ matrix.target == 'web' }}
        run: flutter build web
#       - if: ${{ matrix.target == 'appbundle' }}
#         uses: r0adkll/upload-google-play@v1.0.15
#         with:
#           serviceAccountJsonPlainText: ${{ secrets.SERVICE_TOKEN }}
#           packageName: me.mause.choosefood
#           releaseFiles: build/app/outputs/bundle/release/app-release.aab
#           track: internal
#           changesNotSentForReview: true
#           status: draft
      - if: ${{ matrix.target == 'appbundle' }}
        run: |
          gh release download 1.8.1 --pattern '*.jar' --repo google/bundletool
          java -jar bundletool*.jar build-apks \
             --bundle=build/app/outputs/bundle/release/app-release.aab \
             --output=apks.apks \
             --mode=universal \
             --ks android/app/key.store \
             --ks-key-alias upload \
             --ks-pass pass:${{ secrets.KEY_STORE_PASSWORD}} \
             --key-pass pass:${{ secrets.KEY_PASSWORD }}
          unzip apks.apks
          mv universal.apk choose-food-1.0.${{ github.run_number }}.apk
          find . -name "*.apk" -exec echo "APK: {}" \; -exec sh -c 'keytool -printcert -jarfile "{}"' \;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: ${{ matrix.target == 'appbundle' }}
        uses: actions/upload-artifact@v2
        with:
          path: '*.apk'

      - if: ${{ matrix.target == 'appbundle' }}
        uses: actions/upload-artifact@v2
        with:
          name: appbundle
          path: build/app/outputs/bundle/release/app-release.aab

      - uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ matrix.target == 'appbundle' && github.ref == 'refs/heads/main' }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            build/app/outputs/bundle/release/app-release.aab
            *.apk
      - if: ${{ matrix.target == 'web' }}
        uses: actions/upload-artifact@v2
        with:
          name: web
          path: build/web

  integration_tests:
    runs-on: macos-latest

    strategy:
      matrix:
        api-level: [31]

    steps:
      - uses: actions/checkout@v2

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 15
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          avd-name: android
          script: echo "Generated AVD snapshot for caching."
          target: google_apis
          arch: x86_64
          profile: Nexus 6

      - name: Cache Flutter dependencies
        uses: actions/cache@v1
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}-${{ hashFiles('pubspec.lock') }}

      - uses: subosito/flutter-action@v1
        with:
          channel: 'beta'

      - name: Install dependencies
        run: flutter pub get

      - name: Build
        run: flutter pub run build_runner build

      - name: Integration tests
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 15
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          avd-name: android
          script: |
            flutter drive --driver=test_driver/integration_test.dart --target=integration_test/main_test.dart -d android
