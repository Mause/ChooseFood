# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    uses: Mause/ChooseFood/.github/workflows/reuse.yaml@main

  build_releases:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        target: [appbundle, web]

    steps:
      - uses: actions/checkout@v2

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}-${{ hashFiles('pubspec.lock') }}

      - uses: subosito/flutter-action@v1
        with:
          channel: beta
      - name: Install dependencies
        run: flutter pub get
      - name: Prebuild
        run: flutter pub run build_runner build
      - if: ${{ matrix.target == 'appbundle' }}
        run: echo "$SIGNING_KEY" | openssl base64 -d > android/app/key.store
        shell: bash
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      - if: ${{ matrix.target == 'appbundle' }}
        run: |
          flutter build appbundle \
            --build-number ${{ github.run_number }} \
            --dart-define=SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
            --dart-define=GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
            --dart-define=SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            --dart-define=SUPABASE_KEY=${{ secrets.SUPABASE_KEY }} \
            --no-shrink
        env:
          SIGNING_KEY: key.store
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      - if: ${{ matrix.target == 'web' }}
        run: flutter build web
#       - if: ${{ matrix.target == 'appbundle' }}
#         uses: r0adkll/upload-google-play@v1.0.15
#         with:
#           serviceAccountJsonPlainText: ${{ secrets.SERVICE_TOKEN }}
#           packageName: me.mause.choosefood
#           releaseFiles: build/app/outputs/bundle/release/app-release.aab
#           track: internal
#           changesNotSentForReview: true
#           status: draft
      - if: ${{ matrix.target == 'appbundle' }}
        run: |
          gh release download 1.8.1 --pattern '*.jar' --repo google/bundletool
          java -jar bundletool*.jar build-apks \
             --bundle=build/app/outputs/bundle/release/app-release.aab \
             --output=apks.apks \
             --mode=universal \
             --ks android/app/key.store \
             --ks-key-alias upload \
             --ks-pass pass:${{ secrets.KEY_STORE_PASSWORD}} \
             --key-pass pass:${{ secrets.KEY_PASSWORD }}
          unzip apks.apks
          mv universal.apk choose-food-1.0.${{ github.run_number }}.apk
          find . -name "*.apk" -exec echo "APK: {}" \; -exec sh -c 'keytool -printcert -jarfile "{}"' \;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: ${{ matrix.target == 'appbundle' }}
        uses: actions/upload-artifact@v2
        with:
          name: apk
          path: '*.apk'

      - if: ${{ matrix.target == 'appbundle' }}
        uses: actions/upload-artifact@v2
        with:
          name: appbundle
          path: build/app/outputs/bundle/release/app-release.aab

#       - uses: "marvinpinto/action-automatic-releases@latest"
#         if: ${{ matrix.target == 'appbundle' && github.ref == 'refs/heads/main' }}
#         with:
#           repo_token: "${{ secrets.GITHUB_TOKEN }}"
#           automatic_release_tag: "builds/androiddeploy/1.0.0+${{ github.run_number }}"
#           prerelease: false
#           title: "Build 1.0.0+${{ github.run_number }}"
#           files: |
#             build/app/outputs/bundle/release/app-release.aab
#             *.apk

      - if: ${{ matrix.target == 'web' }}
        uses: actions/upload-artifact@v2
        with:
          name: web
          path: build/web

  verify_formatting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}-${{ hashFiles('pubspec.lock') }}

      - uses: subosito/flutter-action@v1
        with:
          channel: 'beta'

      - name: Verify formatting
        run: flutter format --output=none --set-exit-if-changed .

  integration_tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        api-level: [31]

    steps:
      - uses: actions/checkout@v2

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}-${{ hashFiles('pubspec.lock') }}

      - uses: subosito/flutter-action@v1
        with:
          channel: 'beta'

      - name: Install dependencies
        run: flutter pub get

      - name: Build
        run: flutter pub run build_runner build

      - uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: adopt-hotspot

      - run: echo "$SIGNING_KEY" | openssl base64 -d > android/app/key.store
        shell: bash
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}

      - name: Build test apk
        working-directory: android
        run: |
          flutter build apk
          ./gradlew app:assembleAndroidTest
          ./gradlew app:assembleDebug -Ptarget=integration_test/screenshot_test.dart
        env:
          SIGNING_KEY: key.store
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: choose-food-330101
          service_account_key: ${{ secrets.SERVICE_TOKEN }}
          export_default_credentials: true

      - name: Integration tests
        timeout-minutes: 15
        run: |
          gcloud firebase test android run \
            --type instrumentation \
            --app build/app/outputs/flutter-apk/app-debug.apk \
            --test android/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=Pixel3,version=30,locale=en_AU,orientation=portrait

      - name: List buckets
        if: always()
        run: |
          gsutil ls -p choose-food-330101

      - name: List bucket
        if: always()
        run: |
          gsutil ls -p choose-food-330101 | head

      - name: List bucket contents
        if: always()
        run: |
          BUCKET_NAME=$(gsutil ls | head)
          echo Bucket name: $BUCKET_NAME
          gsutil ls -r gs://$BUCKET_NAME/**

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: screenshots
          path: screenshots/

      - name: Upload failed tests
        if: always() && github.ref != 'refs/heads/main'
        uses: edunad/actions-image@v1.0.1
        with:
            path: './screenshots/*'
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            title: 'Screenshots'

  note_changelog:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true

      - run: |
          bundle exec fastlane create_notes build_number:${{ github.run_number }}

  create_github_release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - build_releases
      - integration_tests
      - build_windows
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: appbundle
          path: '*.aab'

      - uses: actions/download-artifact@v2
        with:
          name: apk
          path: '*.apk'

      - uses: actions/download-artifact@v2
        with:
          name: msix
          path: '*.msix'

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            *.aab
            *.apk
            *.msix

  publish:
    runs-on: ubuntu-latest
    needs: create_github_release
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true
      - run: echo $SERVICE_TOKEN > secrets.json
        shell: bash
        env:
          SERVICE_TOKEN: ${{ secrets.SERVICE_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          name: appbundle
          path: build/app/outputs/bundle/release/

      - run: |
          ls -a build/app/outputs/bundle/release/
          git config user.name "GitHub Actions"
          git config user.email "ga@mause.me"

      - run: bundle exec fastlane android deploy build_number:${{ github.run_number }}

  build_windows:
    runs-on: windows-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}-${{ hashFiles('pubspec.lock') }}

      - uses: subosito/flutter-action@v1
        with:
          channel: 'beta'

      - run: flutter config --enable-windows-desktop
      - name: Install dependencies
        run: flutter pub get

      - name: Build
        run: flutter pub run build_runner build

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: flutter format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: flutter analyze

      - name: Unit tests
        run: flutter test --dart-define=SENTRY_DSN=${{ secrets.SENTRY_DSN }} test/

      - run: flutter build windows
      - run: flutter pub run msix:create
      - uses: actions/upload-artifact@v2
        with:
          name: msix
          path: build\windows\runner\**\*.msix
